State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On variable_decl shift to state 4
-- On program shift to state 6
-- On list(variable_decl) shift to state 7
## Reductions:
-- On FUNCTION EOF
--   reduce production list(variable_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
variable_decl -> VAR . IDENT SEMI [ WHILE VAR RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## VAR IDENT
## LR(1) items:
variable_decl -> VAR IDENT . SEMI [ WHILE VAR RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL ]
## Transitions:
-- On SEMI shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## VAR IDENT SEMI
## LR(1) items:
variable_decl -> VAR IDENT SEMI . [ WHILE VAR RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE VAR RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL
--   reduce production variable_decl -> VAR IDENT SEMI

State 4:
## Known stack suffix:
## variable_decl
## LR(1) items:
list(variable_decl) -> variable_decl . list(variable_decl) [ WHILE RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL ]
## Transitions:
-- On VAR shift to state 1
-- On variable_decl shift to state 4
-- On list(variable_decl) shift to state 5
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL
--   reduce production list(variable_decl) ->

State 5:
## Known stack suffix:
## variable_decl list(variable_decl)
## LR(1) items:
list(variable_decl) -> variable_decl list(variable_decl) . [ WHILE RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT FUNCTION EOF END CST BOOL
--   reduce production list(variable_decl) -> variable_decl list(variable_decl)

State 6:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 7:
## Known stack suffix:
## list(variable_decl)
## LR(1) items:
program -> list(variable_decl) . list(function_def) EOF [ # ]
## Transitions:
-- On FUNCTION shift to state 8
-- On list(function_def) shift to state 74
-- On function_def shift to state 76
## Reductions:
-- On EOF
--   reduce production list(function_def) ->

State 8:
## Known stack suffix:
## FUNCTION
## LR(1) items:
function_def -> FUNCTION . IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On IDENT shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## FUNCTION IDENT
## LR(1) items:
function_def -> FUNCTION IDENT . LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On LPAR shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## FUNCTION IDENT LPAR
## LR(1) items:
function_def -> FUNCTION IDENT LPAR . loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On IDENT shift to state 11
-- On separated_nonempty_list(COMMA,IDENT) shift to state 14
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 15
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 11:
## Known stack suffix:
## IDENT
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT . [ RPAR ]
separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ RPAR ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT

State 12:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ RPAR ]
## Transitions:
-- On IDENT shift to state 11
-- On separated_nonempty_list(COMMA,IDENT) shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## IDENT COMMA separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT)

State 14:
## Known stack suffix:
## separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT)

State 15:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT))
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) . RPAR BEGIN list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On RPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR . BEGIN list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On BEGIN shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN . list(variable_decl) list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On VAR shift to state 1
-- On variable_decl shift to state 4
-- On list(variable_decl) shift to state 18
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production list(variable_decl) ->

State 18:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl)
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) . list(instruction) END [ FUNCTION EOF ]
## Transitions:
-- On WHILE shift to state 19
-- On RETURN shift to state 43
-- On PUTCHAR shift to state 46
-- On LPAR shift to state 21
-- On IF shift to state 51
-- On IDENT shift to state 56
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On list(instruction) shift to state 72
-- On instruction shift to state 66
-- On expression shift to state 68
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 19:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 40
## Reductions:

State 21:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 38
## Reductions:

State 22:
## Known stack suffix:
## IDENT
## LR(1) items:
expression -> IDENT . [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 23
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> IDENT

State 23:
## Known stack suffix:
## IDENT LPAR
## LR(1) items:
expression -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 26
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 27
-- On expression shift to state 29
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 24:
## Known stack suffix:
## CST
## LR(1) items:
expression -> CST . [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> CST

State 25:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> BOOL

State 26:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 27:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On RPAR shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 29:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT COMMA ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT COMMA ]
expression -> expression . LT expression [ STAR RPAR PLUS LT COMMA ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAR ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On STAR shift to state 30
-- On PLUS shift to state 32
-- On LT shift to state 34
-- On COMMA shift to state 36
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 30:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression STAR expression . [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> expression STAR expression

State 32:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression PLUS expression . [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On STAR shift to state 30
## Reductions:
-- On SEMI RPAR PLUS LT COMMA
--   reduce production expression -> expression PLUS expression

State 34:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression LT expression . [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
-- On STAR shift to state 30
-- On PLUS shift to state 32
## Reductions:
-- On SEMI RPAR LT COMMA
--   reduce production expression -> expression LT expression

State 36:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 37
-- On expression shift to state 29
## Reductions:

State 37:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 38:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> LPAR expression . RPAR [ STAR SEMI RPAR PLUS LT COMMA ]
expression -> expression . PLUS expression [ STAR RPAR PLUS LT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT ]
## Transitions:
-- On STAR shift to state 30
-- On RPAR shift to state 39
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 39:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ STAR SEMI RPAR PLUS LT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR PLUS LT COMMA
--   reduce production expression -> LPAR expression RPAR

State 40:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On RPAR shift to state 41
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 41:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 19
-- On RETURN shift to state 43
-- On PUTCHAR shift to state 46
-- On LPAR shift to state 21
-- On IF shift to state 51
-- On IDENT shift to state 56
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On list(instruction) shift to state 70
-- On instruction shift to state 66
-- On expression shift to state 68
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 43:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT ]
instruction -> RETURN expression . SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On SEMI shift to state 45
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 45:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> RETURN expression SEMI

State 46:
## Known stack suffix:
## PUTCHAR
## LR(1) items:
instruction -> PUTCHAR . LPAR expression RPAR SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## PUTCHAR LPAR
## LR(1) items:
instruction -> PUTCHAR LPAR . expression RPAR SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## PUTCHAR LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT ]
instruction -> PUTCHAR LPAR expression . RPAR SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On RPAR shift to state 49
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 49:
## Known stack suffix:
## PUTCHAR LPAR expression RPAR
## LR(1) items:
instruction -> PUTCHAR LPAR expression RPAR . SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On SEMI shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## PUTCHAR LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PUTCHAR LPAR expression RPAR SEMI . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI

State 51:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On RPAR shift to state 54
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 54:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 19
-- On RETURN shift to state 43
-- On PUTCHAR shift to state 46
-- On LPAR shift to state 21
-- On IF shift to state 51
-- On IDENT shift to state 56
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On list(instruction) shift to state 60
-- On instruction shift to state 66
-- On expression shift to state 68
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 56:
## Known stack suffix:
## IDENT
## LR(1) items:
expression -> IDENT . [ STAR SEMI PLUS LT ]
expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT ]
instruction -> IDENT . SET expression SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On SET shift to state 57
-- On LPAR shift to state 23
## Reductions:
-- On STAR SEMI PLUS LT
--   reduce production expression -> IDENT

State 57:
## Known stack suffix:
## IDENT SET
## LR(1) items:
instruction -> IDENT SET . expression SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 21
-- On IDENT shift to state 22
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On expression shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## IDENT SET expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT ]
instruction -> IDENT SET expression . SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On SEMI shift to state 59
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 59:
## Known stack suffix:
## IDENT SET expression SEMI
## LR(1) items:
instruction -> IDENT SET expression SEMI . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> IDENT SET expression SEMI

State 60:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On ELSE shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 19
-- On RETURN shift to state 43
-- On PUTCHAR shift to state 46
-- On LPAR shift to state 21
-- On IF shift to state 51
-- On IDENT shift to state 56
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On list(instruction) shift to state 64
-- On instruction shift to state 66
-- On expression shift to state 68
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 64:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 66:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 19
-- On RETURN shift to state 43
-- On PUTCHAR shift to state 46
-- On LPAR shift to state 21
-- On IF shift to state 51
-- On IDENT shift to state 56
-- On CST shift to state 24
-- On BOOL shift to state 25
-- On list(instruction) shift to state 67
-- On instruction shift to state 66
-- On expression shift to state 68
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 67:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 68:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT ]
instruction -> expression . SEMI [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On STAR shift to state 30
-- On SEMI shift to state 69
-- On PLUS shift to state 32
-- On LT shift to state 34
## Reductions:

State 69:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> expression SEMI

State 70:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE RETURN PUTCHAR LPAR IF IDENT END CST BOOL
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 72:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction)
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) . END [ FUNCTION EOF ]
## Transitions:
-- On END shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END
## LR(1) items:
function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END . [ FUNCTION EOF ]
## Transitions:
## Reductions:
-- On FUNCTION EOF
--   reduce production function_def -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR BEGIN list(variable_decl) list(instruction) END

State 74:
## Known stack suffix:
## list(variable_decl) list(function_def)
## LR(1) items:
program -> list(variable_decl) list(function_def) . EOF [ # ]
## Transitions:
-- On EOF shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## list(variable_decl) list(function_def) EOF
## LR(1) items:
program -> list(variable_decl) list(function_def) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(variable_decl) list(function_def) EOF

State 76:
## Known stack suffix:
## function_def
## LR(1) items:
list(function_def) -> function_def . list(function_def) [ EOF ]
## Transitions:
-- On FUNCTION shift to state 8
-- On list(function_def) shift to state 77
-- On function_def shift to state 76
## Reductions:
-- On EOF
--   reduce production list(function_def) ->

State 77:
## Known stack suffix:
## function_def list(function_def)
## LR(1) items:
list(function_def) -> function_def list(function_def) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(function_def) -> function_def list(function_def)

