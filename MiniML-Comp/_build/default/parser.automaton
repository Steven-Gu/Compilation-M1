State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On TYPE shift to state 1
-- On type_def shift to state 25
-- On program shift to state 27
-- On list(type_def) shift to state 28
## Reductions:
-- On SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production list(type_def) ->

State 1:
## Known stack suffix:
## TYPE
## LR(1) items:
type_def -> TYPE . IDENT EQ separated_nonempty_list(BAR,cstr_def) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## TYPE IDENT
## LR(1) items:
type_def -> TYPE IDENT . EQ separated_nonempty_list(BAR,cstr_def) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On EQ shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## TYPE IDENT EQ
## LR(1) items:
type_def -> TYPE IDENT EQ . separated_nonempty_list(BAR,cstr_def) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On CSTR shift to state 4
-- On separated_nonempty_list(BAR,cstr_def) shift to state 21
-- On cstr_def shift to state 22
## Reductions:

State 4:
## Known stack suffix:
## CSTR
## LR(1) items:
cstr_def -> CSTR . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
cstr_def -> CSTR . OF separated_nonempty_list(STAR,simple_ty) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
-- On OF shift to state 5
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR
--   reduce production cstr_def -> CSTR

State 5:
## Known stack suffix:
## CSTR OF
## LR(1) items:
cstr_def -> CSTR OF . separated_nonempty_list(STAR,simple_ty) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On simple_ty shift to state 17
-- On separated_nonempty_list(STAR,simple_ty) shift to state 20
## Reductions:

State 6:
## Known stack suffix:
## TINT
## LR(1) items:
simple_ty -> TINT . [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
## Transitions:
## Reductions:
-- On TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW
--   reduce production simple_ty -> TINT

State 7:
## Known stack suffix:
## TBOOL
## LR(1) items:
simple_ty -> TBOOL . [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
## Transitions:
## Reductions:
-- On TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW
--   reduce production simple_ty -> TBOOL

State 8:
## Known stack suffix:
## LPAR
## LR(1) items:
simple_ty -> LPAR . ty RPAR [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On ty shift to state 10
-- On simple_ty shift to state 13
## Reductions:

State 9:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_ty -> IDENT . [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
## Transitions:
## Reductions:
-- On TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW
--   reduce production simple_ty -> IDENT

State 10:
## Known stack suffix:
## LPAR ty
## LR(1) items:
simple_ty -> LPAR ty . RPAR [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
ty -> ty . ARROW ty [ STAR RPAR ARROW ]
ty -> ty . STAR ty [ STAR RPAR ARROW ]
## Transitions:
-- On STAR shift to state 11
-- On RPAR shift to state 14
-- On ARROW shift to state 15
## Reductions:

State 11:
## Known stack suffix:
## ty STAR
## LR(1) items:
ty -> ty STAR . ty [ STAR RPAR EQ ARROW ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On ty shift to state 12
-- On simple_ty shift to state 13
## Reductions:

State 12:
## Known stack suffix:
## ty STAR ty
## LR(1) items:
ty -> ty . ARROW ty [ STAR RPAR EQ ARROW ]
ty -> ty . STAR ty [ STAR RPAR EQ ARROW ]
ty -> ty STAR ty . [ STAR RPAR EQ ARROW ]
## Transitions:
## Reductions:
-- On STAR RPAR EQ ARROW
--   reduce production ty -> ty STAR ty

State 13:
## Known stack suffix:
## simple_ty
## LR(1) items:
ty -> simple_ty . [ STAR RPAR EQ ARROW ]
## Transitions:
## Reductions:
-- On STAR RPAR EQ ARROW
--   reduce production ty -> simple_ty

State 14:
## Known stack suffix:
## LPAR ty RPAR
## LR(1) items:
simple_ty -> LPAR ty RPAR . [ TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW ]
## Transitions:
## Reductions:
-- On TYPE STAR SND RPAR NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST EQ CSTR BOOL BAR ARROW
--   reduce production simple_ty -> LPAR ty RPAR

State 15:
## Known stack suffix:
## ty ARROW
## LR(1) items:
ty -> ty ARROW . ty [ STAR RPAR EQ ARROW ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On ty shift to state 16
-- On simple_ty shift to state 13
## Reductions:

State 16:
## Known stack suffix:
## ty ARROW ty
## LR(1) items:
ty -> ty . ARROW ty [ STAR RPAR EQ ARROW ]
ty -> ty ARROW ty . [ STAR RPAR EQ ARROW ]
ty -> ty . STAR ty [ STAR RPAR EQ ARROW ]
## Transitions:
-- On STAR shift to state 11
## Reductions:
-- On RPAR EQ
--   reduce production ty -> ty ARROW ty

State 17:
## Known stack suffix:
## simple_ty
## LR(1) items:
separated_nonempty_list(STAR,simple_ty) -> simple_ty . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
separated_nonempty_list(STAR,simple_ty) -> simple_ty . STAR separated_nonempty_list(STAR,simple_ty) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
-- On STAR shift to state 18
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR
--   reduce production separated_nonempty_list(STAR,simple_ty) -> simple_ty

State 18:
## Known stack suffix:
## simple_ty STAR
## LR(1) items:
separated_nonempty_list(STAR,simple_ty) -> simple_ty STAR . separated_nonempty_list(STAR,simple_ty) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On simple_ty shift to state 17
-- On separated_nonempty_list(STAR,simple_ty) shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## simple_ty STAR separated_nonempty_list(STAR,simple_ty)
## LR(1) items:
separated_nonempty_list(STAR,simple_ty) -> simple_ty STAR separated_nonempty_list(STAR,simple_ty) . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR
--   reduce production separated_nonempty_list(STAR,simple_ty) -> simple_ty STAR separated_nonempty_list(STAR,simple_ty)

State 20:
## Known stack suffix:
## CSTR OF separated_nonempty_list(STAR,simple_ty)
## LR(1) items:
cstr_def -> CSTR OF separated_nonempty_list(STAR,simple_ty) . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR ]
## Transitions:
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL BAR
--   reduce production cstr_def -> CSTR OF separated_nonempty_list(STAR,simple_ty)

State 21:
## Known stack suffix:
## TYPE IDENT EQ separated_nonempty_list(BAR,cstr_def)
## LR(1) items:
type_def -> TYPE IDENT EQ separated_nonempty_list(BAR,cstr_def) . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production type_def -> TYPE IDENT EQ separated_nonempty_list(BAR,cstr_def)

State 22:
## Known stack suffix:
## cstr_def
## LR(1) items:
separated_nonempty_list(BAR,cstr_def) -> cstr_def . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
separated_nonempty_list(BAR,cstr_def) -> cstr_def . BAR separated_nonempty_list(BAR,cstr_def) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On BAR shift to state 23
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production separated_nonempty_list(BAR,cstr_def) -> cstr_def

State 23:
## Known stack suffix:
## cstr_def BAR
## LR(1) items:
separated_nonempty_list(BAR,cstr_def) -> cstr_def BAR . separated_nonempty_list(BAR,cstr_def) [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On CSTR shift to state 4
-- On separated_nonempty_list(BAR,cstr_def) shift to state 24
-- On cstr_def shift to state 22
## Reductions:

State 24:
## Known stack suffix:
## cstr_def BAR separated_nonempty_list(BAR,cstr_def)
## LR(1) items:
separated_nonempty_list(BAR,cstr_def) -> cstr_def BAR separated_nonempty_list(BAR,cstr_def) . [ TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
## Reductions:
-- On TYPE SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production separated_nonempty_list(BAR,cstr_def) -> cstr_def BAR separated_nonempty_list(BAR,cstr_def)

State 25:
## Known stack suffix:
## type_def
## LR(1) items:
list(type_def) -> type_def . list(type_def) [ SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
-- On TYPE shift to state 1
-- On type_def shift to state 25
-- On list(type_def) shift to state 26
## Reductions:
-- On SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production list(type_def) ->

State 26:
## Known stack suffix:
## type_def list(type_def)
## LR(1) items:
list(type_def) -> type_def list(type_def) . [ SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL ]
## Transitions:
## Reductions:
-- On SND NOT MINUS MATCH LPAR LET INT IF IDENT FUN FST CSTR BOOL
--   reduce production list(type_def) -> type_def list(type_def)

State 27:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 28:
## Known stack suffix:
## list(type_def)
## LR(1) items:
program -> list(type_def) . expression EOF [ # ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 138
## Reductions:

State 29:
## Known stack suffix:
## SND
## LR(1) items:
expression -> SND . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 137
## Reductions:

State 30:
## Known stack suffix:
## NOT
## LR(1) items:
expression -> NOT . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 136
## Reductions:

State 31:
## Known stack suffix:
## LPAR
## LR(1) items:
simple_expression -> LPAR . expression RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 135
## Reductions:

State 32:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 36
## Reductions:

State 33:
## Known stack suffix:
## INT
## LR(1) items:
simple_expression -> INT . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production simple_expression -> INT

State 34:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_expression -> IDENT . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production simple_expression -> IDENT

State 35:
## Known stack suffix:
## BOOL
## LR(1) items:
simple_expression -> BOOL . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production simple_expression -> BOOL

State 36:
## Known stack suffix:
## MINUS simple_expression
## LR(1) items:
expression -> MINUS simple_expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> MINUS simple_expression

State 37:
## Known stack suffix:
## MATCH
## LR(1) items:
expression -> MATCH . expression WITH cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 119
## Reductions:

State 38:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression COMMA expression RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
simple_expression -> LPAR . expression RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 114
## Reductions:

State 39:
## Known stack suffix:
## LET
## LR(1) items:
expression -> LET . IDENT list(typed_ident) EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> LET . REC IDENT list(typed_ident) COLON ty EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On REC shift to state 40
-- On IDENT shift to state 108
## Reductions:

State 40:
## Known stack suffix:
## LET REC
## LR(1) items:
expression -> LET REC . IDENT list(typed_ident) COLON ty EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On IDENT shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## LET REC IDENT
## LR(1) items:
expression -> LET REC IDENT . list(typed_ident) COLON ty EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 42
-- On typed_ident shift to state 47
-- On list(typed_ident) shift to state 49
## Reductions:
-- On COLON
--   reduce production list(typed_ident) ->

State 42:
## Known stack suffix:
## LPAR
## LR(1) items:
typed_ident -> LPAR . IDENT COLON ty RPAR [ LPAR EQ COLON ARROW ]
## Transitions:
-- On IDENT shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAR IDENT
## LR(1) items:
typed_ident -> LPAR IDENT . COLON ty RPAR [ LPAR EQ COLON ARROW ]
## Transitions:
-- On COLON shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## LPAR IDENT COLON
## LR(1) items:
typed_ident -> LPAR IDENT COLON . ty RPAR [ LPAR EQ COLON ARROW ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On ty shift to state 45
-- On simple_ty shift to state 13
## Reductions:

State 45:
## Known stack suffix:
## LPAR IDENT COLON ty
## LR(1) items:
ty -> ty . ARROW ty [ STAR RPAR ARROW ]
ty -> ty . STAR ty [ STAR RPAR ARROW ]
typed_ident -> LPAR IDENT COLON ty . RPAR [ LPAR EQ COLON ARROW ]
## Transitions:
-- On STAR shift to state 11
-- On RPAR shift to state 46
-- On ARROW shift to state 15
## Reductions:

State 46:
## Known stack suffix:
## LPAR IDENT COLON ty RPAR
## LR(1) items:
typed_ident -> LPAR IDENT COLON ty RPAR . [ LPAR EQ COLON ARROW ]
## Transitions:
## Reductions:
-- On LPAR EQ COLON ARROW
--   reduce production typed_ident -> LPAR IDENT COLON ty RPAR

State 47:
## Known stack suffix:
## typed_ident
## LR(1) items:
list(typed_ident) -> typed_ident . list(typed_ident) [ EQ COLON ]
## Transitions:
-- On LPAR shift to state 42
-- On typed_ident shift to state 47
-- On list(typed_ident) shift to state 48
## Reductions:
-- On EQ COLON
--   reduce production list(typed_ident) ->

State 48:
## Known stack suffix:
## typed_ident list(typed_ident)
## LR(1) items:
list(typed_ident) -> typed_ident list(typed_ident) . [ EQ COLON ]
## Transitions:
## Reductions:
-- On EQ COLON
--   reduce production list(typed_ident) -> typed_ident list(typed_ident)

State 49:
## Known stack suffix:
## LET REC IDENT list(typed_ident)
## LR(1) items:
expression -> LET REC IDENT list(typed_ident) . COLON ty EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On COLON shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON
## LR(1) items:
expression -> LET REC IDENT list(typed_ident) COLON . ty EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On TINT shift to state 6
-- On TBOOL shift to state 7
-- On LPAR shift to state 8
-- On IDENT shift to state 9
-- On ty shift to state 51
-- On simple_ty shift to state 13
## Reductions:

State 51:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON ty
## LR(1) items:
expression -> LET REC IDENT list(typed_ident) COLON ty . EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
ty -> ty . ARROW ty [ STAR EQ ARROW ]
ty -> ty . STAR ty [ STAR EQ ARROW ]
## Transitions:
-- On STAR shift to state 11
-- On EQ shift to state 52
-- On ARROW shift to state 15
## Reductions:

State 52:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON ty EQ
## LR(1) items:
expression -> LET REC IDENT list(typed_ident) COLON ty EQ . expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 105
## Reductions:

State 53:
## Known stack suffix:
## IF
## LR(1) items:
expression -> IF . expression THEN expression ELSE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 100
## Reductions:

State 54:
## Known stack suffix:
## FUN
## LR(1) items:
expression -> FUN . typed_ident ARROW expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 42
-- On typed_ident shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## FUN typed_ident
## LR(1) items:
expression -> FUN typed_ident . ARROW expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On ARROW shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## FUN typed_ident ARROW
## LR(1) items:
expression -> FUN typed_ident ARROW . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 99
## Reductions:

State 57:
## Known stack suffix:
## FST
## LR(1) items:
expression -> FST . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 98
## Reductions:

State 58:
## Known stack suffix:
## CSTR
## LR(1) items:
expression -> CSTR . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> CSTR . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 59
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> CSTR

State 59:
## Known stack suffix:
## CSTR LPAR
## LR(1) items:
expression -> CSTR LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On separated_nonempty_list(COMMA,expression) shift to state 61
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 62
-- On expression shift to state 64
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 60:
## Known stack suffix:
## simple_expression
## LR(1) items:
expression -> simple_expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> simple_expression

State 61:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 62:
## Known stack suffix:
## CSTR LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> CSTR LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On RPAR shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## CSTR LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> CSTR LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> CSTR LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 64:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAR ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On COMMA shift to state 94
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 65:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression STAR expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression STAR expression

State 67:
## Known stack suffix:
## expression LSR
## LR(1) items:
expression -> expression LSR . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expression LSR expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression LSR expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression LSR expression

State 69:
## Known stack suffix:
## expression simple_expression
## LR(1) items:
expression -> expression simple_expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> expression simple_expression

State 70:
## Known stack suffix:
## expression LSL
## LR(1) items:
expression -> expression LSL . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expression LSL expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression LSL expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression LSL expression

State 72:
## Known stack suffix:
## expression SLASH
## LR(1) items:
expression -> expression SLASH . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## expression SLASH expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression SLASH expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression SLASH expression

State 74:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression PLUS expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On MOD shift to state 76
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR PLUS OR NEQ MINUS LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression PLUS expression

State 76:
## Known stack suffix:
## expression MOD
## LR(1) items:
expression -> expression MOD . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expression MOD expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression MOD expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression MOD expression

State 78:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression OR expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR IN EOF ELSE COMMA BAR AND
--   reduce production expression -> expression OR expression

State 80:
## Known stack suffix:
## expression NEQ
## LR(1) items:
expression -> expression NEQ . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## expression NEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression NEQ expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression NEQ expression

State 82:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression MINUS expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On MOD shift to state 76
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR PLUS OR NEQ MINUS LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression MINUS expression

State 84:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression LT expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression LT expression

State 86:
## Known stack suffix:
## expression LE
## LR(1) items:
expression -> expression LE . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## expression LE expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression LE expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression LE expression

State 88:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression GT expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression GT expression

State 90:
## Known stack suffix:
## expression GE
## LR(1) items:
expression -> expression GE . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## expression GE expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression GE expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression GE expression

State 92:
## Known stack suffix:
## expression EQ
## LR(1) items:
expression -> expression EQ . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression EQ expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR NEQ LT LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> expression EQ expression

State 94:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On separated_nonempty_list(COMMA,expression) shift to state 95
-- On expression shift to state 64
## Reductions:

State 95:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 96:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression AND expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR OR IN EOF ELSE COMMA BAR AND
--   reduce production expression -> expression AND expression

State 98:
## Known stack suffix:
## FST expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> FST expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> FST expression

State 99:
## Known stack suffix:
## FUN typed_ident ARROW expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> FUN typed_ident ARROW expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR IN EOF ELSE COMMA BAR
--   reduce production expression -> FUN typed_ident ARROW expression

State 100:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . PLUS expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . simple_expression [ THEN STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> IF expression . THEN expression ELSE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On THEN shift to state 101
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 101:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
expression -> IF expression THEN . expression ELSE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## IF expression THEN expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . LT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . LE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . GT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . GE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . AND expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . OR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ ELSE BOOL AND ]
expression -> IF expression THEN expression . ELSE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On ELSE shift to state 103
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 103:
## Known stack suffix:
## IF expression THEN expression ELSE
## LR(1) items:
expression -> IF expression THEN expression ELSE . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF expression THEN expression ELSE expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> IF expression THEN expression ELSE expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR IN EOF ELSE COMMA BAR
--   reduce production expression -> IF expression THEN expression ELSE expression

State 105:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON ty EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> LET REC IDENT list(typed_ident) COLON ty EQ expression . IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IN shift to state 106
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 106:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON ty EQ expression IN
## LR(1) items:
expression -> LET REC IDENT list(typed_ident) COLON ty EQ expression IN . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LET REC IDENT list(typed_ident) COLON ty EQ expression IN expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> LET REC IDENT list(typed_ident) COLON ty EQ expression IN expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR IN EOF ELSE COMMA BAR
--   reduce production expression -> LET REC IDENT list(typed_ident) COLON ty EQ expression IN expression

State 108:
## Known stack suffix:
## LET IDENT
## LR(1) items:
expression -> LET IDENT . list(typed_ident) EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 42
-- On typed_ident shift to state 47
-- On list(typed_ident) shift to state 109
## Reductions:
-- On EQ
--   reduce production list(typed_ident) ->

State 109:
## Known stack suffix:
## LET IDENT list(typed_ident)
## LR(1) items:
expression -> LET IDENT list(typed_ident) . EQ expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On EQ shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## LET IDENT list(typed_ident) EQ
## LR(1) items:
expression -> LET IDENT list(typed_ident) EQ . expression IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## LET IDENT list(typed_ident) EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ BOOL AND ]
expression -> LET IDENT list(typed_ident) EQ expression . IN expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IN shift to state 112
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 112:
## Known stack suffix:
## LET IDENT list(typed_ident) EQ expression IN
## LR(1) items:
expression -> LET IDENT list(typed_ident) EQ expression IN . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## LET IDENT list(typed_ident) EQ expression IN expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> LET IDENT list(typed_ident) EQ expression IN expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN RPAR IN EOF ELSE COMMA BAR
--   reduce production expression -> LET IDENT list(typed_ident) EQ expression IN expression

State 114:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
expression -> LPAR expression . COMMA expression RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ COMMA BOOL AND ]
simple_expression -> LPAR expression . RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On RPAR shift to state 115
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On COMMA shift to state 116
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 115:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
simple_expression -> LPAR expression RPAR . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production simple_expression -> LPAR expression RPAR

State 116:
## Known stack suffix:
## LPAR expression COMMA
## LR(1) items:
expression -> LPAR expression COMMA . expression RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## LPAR expression COMMA expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> LPAR expression COMMA expression . RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On RPAR shift to state 118
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 118:
## Known stack suffix:
## LPAR expression COMMA expression RPAR
## LR(1) items:
expression -> LPAR expression COMMA expression RPAR . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> LPAR expression COMMA expression RPAR

State 119:
## Known stack suffix:
## MATCH expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . simple_expression [ WITH STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> MATCH expression . WITH cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On WITH shift to state 120
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 120:
## Known stack suffix:
## MATCH expression WITH
## LR(1) items:
expression -> MATCH expression WITH . cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On BAR shift to state 121
-- On cases shift to state 134
## Reductions:

State 121:
## Known stack suffix:
## BAR
## LR(1) items:
cases -> BAR . pattern ARROW expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
cases -> BAR . pattern ARROW expression cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On CSTR shift to state 122
-- On pattern shift to state 130
## Reductions:

State 122:
## Known stack suffix:
## CSTR
## LR(1) items:
pattern -> CSTR . [ ARROW ]
pattern -> CSTR . LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR [ ARROW ]
## Transitions:
-- On LPAR shift to state 123
## Reductions:
-- On ARROW
--   reduce production pattern -> CSTR

State 123:
## Known stack suffix:
## CSTR LPAR
## LR(1) items:
pattern -> CSTR LPAR . loption(separated_nonempty_list(COMMA,IDENT)) RPAR [ ARROW ]
## Transitions:
-- On IDENT shift to state 124
-- On separated_nonempty_list(COMMA,IDENT) shift to state 127
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 128
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 124:
## Known stack suffix:
## IDENT
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT . [ RPAR ]
separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ RPAR ]
## Transitions:
-- On COMMA shift to state 125
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT

State 125:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ RPAR ]
## Transitions:
-- On IDENT shift to state 124
-- On separated_nonempty_list(COMMA,IDENT) shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## IDENT COMMA separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT)

State 127:
## Known stack suffix:
## separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT)

State 128:
## Known stack suffix:
## CSTR LPAR loption(separated_nonempty_list(COMMA,IDENT))
## LR(1) items:
pattern -> CSTR LPAR loption(separated_nonempty_list(COMMA,IDENT)) . RPAR [ ARROW ]
## Transitions:
-- On RPAR shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## CSTR LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR
## LR(1) items:
pattern -> CSTR LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production pattern -> CSTR LPAR loption(separated_nonempty_list(COMMA,IDENT)) RPAR

State 130:
## Known stack suffix:
## BAR pattern
## LR(1) items:
cases -> BAR pattern . ARROW expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
cases -> BAR pattern . ARROW expression cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On ARROW shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## BAR pattern ARROW
## LR(1) items:
cases -> BAR pattern ARROW . expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
cases -> BAR pattern ARROW . expression cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On SND shift to state 29
-- On NOT shift to state 30
-- On MINUS shift to state 32
-- On MATCH shift to state 37
-- On LPAR shift to state 38
-- On LET shift to state 39
-- On INT shift to state 33
-- On IF shift to state 53
-- On IDENT shift to state 34
-- On FUN shift to state 54
-- On FST shift to state 57
-- On CSTR shift to state 58
-- On BOOL shift to state 35
-- On simple_expression shift to state 60
-- On expression shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## BAR pattern ARROW expression
## LR(1) items:
cases -> BAR pattern ARROW expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
cases -> BAR pattern ARROW expression . cases [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On BAR shift to state 121
-- On AND shift to state 96
-- On simple_expression shift to state 69
-- On cases shift to state 133
## Reductions:
-- On WITH THEN RPAR IN EOF ELSE COMMA
--   reduce production cases -> BAR pattern ARROW expression

State 133:
## Known stack suffix:
## BAR pattern ARROW expression cases
## LR(1) items:
cases -> BAR pattern ARROW expression cases . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production cases -> BAR pattern ARROW expression cases

State 134:
## Known stack suffix:
## MATCH expression WITH cases
## LR(1) items:
expression -> MATCH expression WITH cases . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> MATCH expression WITH cases

State 135:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ BOOL AND ]
simple_expression -> LPAR expression . RPAR [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On RPAR shift to state 115
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 136:
## Known stack suffix:
## NOT simple_expression
## LR(1) items:
expression -> NOT simple_expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND
--   reduce production expression -> NOT simple_expression

State 137:
## Known stack suffix:
## SND expression
## LR(1) items:
expression -> expression . PLUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MINUS expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . STAR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . SLASH expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . MOD expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSL expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LSR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . EQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . NEQ expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . LE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GT expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . GE expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . AND expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . OR expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> SND expression . [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
expression -> expression . simple_expression [ WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IN IDENT GT GE EQ EOF ELSE COMMA BOOL BAR AND ]
## Transitions:
-- On LPAR shift to state 31
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On simple_expression shift to state 69
## Reductions:
-- On WITH THEN STAR SLASH RPAR PLUS OR NEQ MOD MINUS LT LSR LSL LE IN GT GE EQ EOF ELSE COMMA BAR AND
--   reduce production expression -> SND expression

State 138:
## Known stack suffix:
## list(type_def) expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . MINUS expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . STAR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . SLASH expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . MOD expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . LSL expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . LSR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . EQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . NEQ expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . LT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . LE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . GT expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . GE expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . AND expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . OR expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
expression -> expression . simple_expression [ STAR SLASH PLUS OR NEQ MOD MINUS LT LSR LSL LPAR LE INT IDENT GT GE EQ EOF BOOL AND ]
program -> list(type_def) expression . EOF [ # ]
## Transitions:
-- On STAR shift to state 65
-- On SLASH shift to state 72
-- On PLUS shift to state 74
-- On OR shift to state 78
-- On NEQ shift to state 80
-- On MOD shift to state 76
-- On MINUS shift to state 82
-- On LT shift to state 84
-- On LSR shift to state 67
-- On LSL shift to state 70
-- On LPAR shift to state 31
-- On LE shift to state 86
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On GT shift to state 88
-- On GE shift to state 90
-- On EQ shift to state 92
-- On EOF shift to state 139
-- On BOOL shift to state 35
-- On AND shift to state 96
-- On simple_expression shift to state 69
## Reductions:

State 139:
## Known stack suffix:
## list(type_def) expression EOF
## LR(1) items:
program -> list(type_def) expression EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(type_def) expression EOF

